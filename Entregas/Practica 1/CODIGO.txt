/////ASTAR
using System;
using System.Collections.Generic;
using System.Linq;
using Navigation.Interfaces;
using Navigation.World;
using Unity.VisualScripting;
using UnityEditor.Experimental.GraphView;
using UnityEngine;

namespace Assets.Scripts.GrupoA.AStar
{
    public class AStar : INavigationAlgorithm
    {
        private WorldInfo _world;
        private List<Node> openList = new List<Node>();
        private List<Node> closeList = new List<Node>();

        public void Initialize(WorldInfo worldInfo, INavigationAlgorithm.AllowedMovements allowedMovements)
        {
            _world = worldInfo;
        }

        public Node GetNodePath(CellInfo startNode, CellInfo targetNode)
        {
            openList.Clear();
            closeList.Clear();

            Node current = new Node(startNode);
            Node target = new Node(targetNode);
            openList.Add(current);

            while (openList.Count > 0)
            {
                current = openList.First();
                openList.RemoveAt(0);
                closeList.Add(current);
                if (current.info.x == target.info.x && current.info.y == target.info.y)
                {
                    return current;
                }
                else
                {
                    Node[] sucesors = Expand(current, target);
                    foreach (Node sucesor in sucesors)
                    {
                        if (!visited(sucesor))
                        {
                            openList.Add(sucesor);
                        }
                    }
                    openList.Sort();
                }
            }
            return null;
        }
        public CellInfo[] GetPath(CellInfo startNode, CellInfo targetNode)
        {
            Node current = GetNodePath(startNode, targetNode);

            List<CellInfo> temporal = new List<CellInfo>();
            while (current != null)
            {
                temporal.Add(current.info);
                current = current.padre;
            }
            temporal.Reverse();
            return temporal.ToArray();
        }
        public Node[] Expand(Node padre, Node targetNode)
        {
            List<Node> nodes = new List<Node>();
            CellInfo[] cells = {
                _world[padre.info.x, padre.info.y+1],
                _world[padre.info.x+1, padre.info.y],
                _world[padre.info.x, padre.info.y-1],
                _world[padre.info.x-1, padre.info.y]
            };
            if (cells[0].Walkable)
            {
                nodes.Add(new Node(cells[0], padre.G_Coste, padre));
            }
            if (cells[1].Walkable)
            {
                nodes.Add(new Node(cells[1], padre.G_Coste, padre));
            }
            if (cells[2].Walkable)
            {
                nodes.Add(new Node(cells[2], padre.G_Coste, padre));
            }
            if (cells[3].Walkable)
            {
                nodes.Add(new Node(cells[3], padre.G_Coste, padre));
            }
            nodes.ForEach(node => { node.calculateHeuristic(targetNode); });
            return nodes.ToArray();
        }
        public bool visited(Node node)
        {
            foreach (Node lista in closeList)
            {
                if (lista.EqualsNode(node))
                {
                    return true;
                }
            }
            return false;
        }
    }
}





/////NODE
using Navigation.World;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static Navigation.World.CellInfo;

namespace Assets.Scripts.GrupoA.AStar
{
    public class Node : IComparable<Node>, IEquatable<Node>
    {
        public CellInfo info;
        public Node padre;
        public float G_Coste;
        public float H_Heuristica;
        public float Funcion_Heuristica;

        public Node(CellInfo info, float G_Coste = 0, Node padre = null)
        {
            this.info = info;
            this.padre = padre;
            this.G_Coste = G_Coste + 1;
            this.H_Heuristica = 0;
            this.Funcion_Heuristica = 0;
        }

        public float D_Manhattan(Node targetNode)
        {
            return (Math.Abs(targetNode.info.x - this.info.x) + Math.Abs(targetNode.info.y - this.info.y));
        }
        public float calculateHeuristic(Node targetNode)
        {
            H_Heuristica = D_Manhattan(targetNode);
            //H_Heuristica = this.info.Distance(targetNode.info, DistanceType.Euclidean);
            Funcion_Heuristica = G_Coste + H_Heuristica;
            return Funcion_Heuristica;
        }
        public int CompareTo(Node other)
        {
            if (other == null) return 1;
            return this.Funcion_Heuristica.CompareTo(other.Funcion_Heuristica);
        }

        public bool Equals(Node other)
        {
            if (other == null) return false;
            return this.Funcion_Heuristica == other.Funcion_Heuristica;
        }
        public bool EqualsNode(Node other)
        {
            return this.info.x == other.info.x && this.info.y == other.info.y;
        }
    }
}





/////SUBOBJETIVOS
using System.Collections.Generic;
using Assets.Scripts.GrupoA.AStar;
using Navigation.Interfaces;
using Navigation.World;
using UnityEngine;

namespace Navigation.Agent
{
    public class SobobjectiveSearchAgent : INavigationAgent
    {
        public CellInfo CurrentObjective { get; private set; }
        public Vector3 CurrentDestination { get; private set; }
        public int NumberOfDestinations { get; private set; }

        private WorldInfo _worldInfo;
        private INavigationAlgorithm _navigationAlgorithm;

        private CellInfo _origin;
        private CellInfo[] _objectives;
        private Queue<CellInfo> _path;


        public SobobjectiveSearchAgent(WorldInfo worldInfo, INavigationAlgorithm navigationAlgorithm, CellInfo startPosition)
        {
            _worldInfo = worldInfo;
            _navigationAlgorithm = navigationAlgorithm;
            _origin = startPosition;

            _navigationAlgorithm.Initialize(_worldInfo, INavigationAlgorithm.AllowedMovements.FourDirections);
        }

        public Vector3? GetNextDestination()
        {
            if (_objectives == null)
            {
                _objectives = GetDestinations();
                CurrentObjective = _objectives[_objectives.Length - 1];
                NumberOfDestinations = _objectives.Length;
            }

            if (_path == null || _path.Count == 0)
            {
                if (NumberOfDestinations > 0)
                {
                    NumberOfDestinations--;
                    CurrentObjective = _objectives[NumberOfDestinations];
                }
                CellInfo[] path = _navigationAlgorithm.GetPath(_origin, CurrentObjective);
                _path = new Queue<CellInfo>(path);
            }

            if (_path.Count > 0)
            {
                CellInfo destination = _path.Dequeue();
                _origin = destination;
                CurrentDestination = _worldInfo.ToWorldPosition(destination);
            }

            return CurrentDestination;
        }

        private CellInfo[] GetDestinations()
        {
            List<Node> targets = new List<Node>();
            CellInfo[] objetivos = _worldInfo.Targets;
            Node exit = new Node(_worldInfo.Exit);
            foreach (var item in objetivos)
            {
                Node tmp = new Node(item);
                //tmp.calculateHeuristic(exit);
                tmp.calculateHeuristic(new Node(_origin));
                targets.Add(tmp);
            }
            targets.Sort();
            targets.Add(exit);
            targets.Reverse();
            List<CellInfo> destinations = new List<CellInfo>();
            foreach (var item in targets) { destinations.Add(item.info); }
            return destinations.ToArray();
        }
    }
}

